// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("BaseSlider");

function isSlideInRange(slideNumber, currentSlideNumber, maxSlides, offset) {
  if (slideNumber >= (currentSlideNumber - offset | 0)) {
    return slideNumber < ((currentSlideNumber + maxSlides | 0) - offset | 0);
  } else {
    return false;
  }
}

function renderSlide(slide, offset) {
  var className = (
    offset !== 0 ? "slide slide_offset_" + String(offset) : "slide slide_current"
  ) + (" slide-" + String(slide[/* slideNumber */1]));
  return React.createElement("div", {
              key: "slide-" + String(slide[/* slideNumber */1]),
              className: className
            }, slide[/* content */0]);
}

function make(slides, currentSlide, config, className, children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var length = Belt_List.length(slides);
              var slideContent = Belt_List.map(slides, (function (slide) {
                      if (isSlideInRange(slide[/* slideNumber */1], currentSlide, config[/* maxSlidesToRender */0], config[/* slideOffset */2])) {
                        var offset = slide[/* slideNumber */1] - currentSlide | 0;
                        return renderSlide(slide, offset);
                      } else {
                        return null;
                      }
                    }));
              var match = config[/* loopSlides */1];
              var match$1 = currentSlide < config[/* slideOffset */2];
              var beginExtra = match && match$1 ? Belt_List.map(slides, (function (slide) {
                        var offset = (slide[/* slideNumber */1] - length | 0) - currentSlide | 0;
                        if (offset >= Caml_int32.imul(-1, config[/* slideOffset */2])) {
                          return renderSlide(slide, offset);
                        } else {
                          return null;
                        }
                      })) : /* :: */[
                  null,
                  /* [] */0
                ];
              var match$2 = config[/* loopSlides */1];
              var match$3 = currentSlide > ((length - config[/* maxSlidesToRender */0] | 0) + config[/* slideOffset */2] | 0);
              var endExtra = match$2 && match$3 ? Belt_List.map(slides, (function (slide) {
                        var offset = (length - currentSlide | 0) + slide[/* slideNumber */1] | 0;
                        if (offset <= config[/* slideOffset */2]) {
                          return renderSlide(slide, offset);
                        } else {
                          return null;
                        }
                      })) : /* :: */[
                  null,
                  /* [] */0
                ];
              return React.createElement("div", {
                          className: "slider " + Js_option.getWithDefault("slider-default", className)
                        }, Belt_List.toArray(beginExtra), Belt_List.toArray(slideContent), Belt_List.toArray(endExtra), ReactDOMRe.createElementVariadic("div", {
                              className: "slider-other"
                            }, children));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.isSlideInRange = isSlideInRange;
exports.renderSlide = renderSlide;
exports.make = make;
/* component Not a pure module */
