// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/lib/js/src/Css.js");
var React = require("react");
var Js_option = require("bs-platform/lib/js/js_option.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var imageStyle = Css.style(/* :: */[
      Css.display(Css.inlineBlock),
      /* :: */[
        Css.height(/* `px */[
              25096,
              20
            ]),
        /* :: */[
          Css.width(/* `px */[
                25096,
                20
              ]),
          /* [] */0
        ]
      ]
    ]);

var component = ReasonReact.statelessComponent("ListItemRe");

function renderItemEnd(itemEnd, extraClass) {
  if (itemEnd !== undefined) {
    var value = itemEnd;
    var tmp;
    switch (value.tag | 0) {
      case 0 : 
          tmp = React.createElement("span", undefined, value[0]);
          break;
      case 1 : 
          tmp = React.createElement("span", {
                className: imageStyle,
                style: {
                  backgroundImage: "url('" + (value[0] + "')")
                }
              });
          break;
      case 2 : 
          tmp = React.createElement("button", {
                onClick: value[1]
              }, value[0]);
          break;
      case 3 : 
          tmp = React.createElement("span", undefined);
          break;
      
    }
    return React.createElement("span", {
                className: "item-end item-end-" + extraClass
              }, tmp);
  } else {
    return null;
  }
}

function renderToDiv(text, extraClass) {
  if (text !== undefined) {
    var s = text;
    if (s === "") {
      return null;
    } else {
      return React.createElement("div", {
                  className: extraClass
                }, s);
    }
  } else {
    return null;
  }
}

function renderItemBody(itemBody) {
  var match = itemBody[/* children */3];
  return React.createElement("span", {
              className: "item-body"
            }, renderToDiv(itemBody[/* topTitle */2], "item-top"), React.createElement("div", {
                  className: "list-item-title"
                }, itemBody[/* title */0]), renderToDiv(itemBody[/* subtitle */1], "item-sub"), match !== undefined ? ReactDOMRe.createElementVariadic("div", {
                    className: "list-item-subchildren"
                  }, match) : null);
}

function make(item, className, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var tmp = {
                className: "list-item " + Js_option.getWithDefault("list-item-default", className)
              };
              var tmp$1 = item[/* onClick */3];
              if (tmp$1 !== undefined) {
                tmp.onClick = Caml_option.valFromOption(tmp$1);
              }
              return React.createElement("div", tmp, renderItemEnd(item[/* left */1], "left"), renderItemBody(item[/* body */0]), renderItemEnd(item[/* right */2], "right"));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.imageStyle = imageStyle;
exports.component = component;
exports.renderItemEnd = renderItemEnd;
exports.renderToDiv = renderToDiv;
exports.renderItemBody = renderItemBody;
exports.make = make;
/* imageStyle Not a pure module */
